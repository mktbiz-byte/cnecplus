import os
import hashlib
import secrets
from datetime import datetime, timedelta
from flask import Blueprint, jsonify, request, session
from src.models.user import db
from src.models.analytics import Visitor, Admin
from sqlalchemy import func

admin_auth_bp = Blueprint('admin_auth', __name__)

# ÏÑ∏ÏÖò ÏãúÌÅ¨Î¶ø ÌÇ§
SECRET_KEY = os.getenv('ADMIN_SECRET_KEY', 'your-secret-key-change-this-in-production')

def hash_password(password):
    """ÎπÑÎ∞ÄÎ≤àÌò∏ Ìï¥Ïã±"""
    return hashlib.sha256(password.encode()).hexdigest()

def init_admin_user():
    """Ï¥àÍ∏∞ Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ï ÏÉùÏÑ±"""
    try:
        # Í∏∞Ï°¥ Í¥ÄÎ¶¨Ïûê ÌôïÏù∏
        existing_admin = Admin.query.filter_by(username='admin').first()
        if not existing_admin:
            # Í≥†Ï†ï ÏûÑÏãú ÎπÑÎ∞ÄÎ≤àÌò∏ (Ï≤´ Î∞∞Ìè¨Ïö©)
            default_password = 'cnecplus2025!'
            
            admin = Admin(
                username='admin',
                password_hash=hash_password(default_password)
            )
            db.session.add(admin)
            db.session.commit()
            
            print("=" * 60)
            print("üîê Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ïÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
            print(f"   Username: admin")
            print(f"   Password: {default_password}")
            print("   ‚ö†Ô∏è  Î°úÍ∑∏Ïù∏ ÌõÑ Î∞òÎìúÏãú ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Î≥ÄÍ≤ΩÌïòÏÑ∏Ïöî!")
            print("=" * 60)
            
            return default_password
        else:
            print("‚ÑπÔ∏è  Í∏∞Ï°¥ Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ïÏù¥ Ï°¥Ïû¨Ìï©ÎãàÎã§.")
            print("   Username: admin")
            print("   Password: cnecplus2025! (Í∏∞Î≥∏ ÎπÑÎ∞ÄÎ≤àÌò∏)")
        return None
    except Exception as e:
        print(f"Error creating admin user: {e}")
        return None

@admin_auth_bp.route('/login', methods=['POST'])
def admin_login():
    """Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏Ïù∏"""
    try:
        data = request.json
        username = data.get('username')
        password = data.get('password')
        
        if not username or not password:
            return jsonify({'error': 'Username and password required'}), 400
        
        # Í¥ÄÎ¶¨Ïûê ÌôïÏù∏
        admin = Admin.query.filter_by(username=username).first()
        
        if not admin or admin.password_hash != hash_password(password):
            return jsonify({'error': 'Invalid credentials'}), 401
        
        # ÏÑ∏ÏÖòÏóê Ï†ÄÏû•
        session['admin_id'] = admin.id
        session['admin_username'] = admin.username
        
        # ÎßàÏßÄÎßâ Î°úÍ∑∏Ïù∏ ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
        admin.last_login = datetime.utcnow()
        db.session.commit()
        
        return jsonify({
            'success': True,
            'username': admin.username
        })
    
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@admin_auth_bp.route('/logout', methods=['POST'])
def admin_logout():
    """Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏ÏïÑÏõÉ"""
    session.pop('admin_id', None)
    session.pop('admin_username', None)
    return jsonify({'success': True})

@admin_auth_bp.route('/check', methods=['GET'])
def check_admin():
    """Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏"""
    if 'admin_id' in session:
        return jsonify({
            'authenticated': True,
            'username': session.get('admin_username')
        })
    return jsonify({'authenticated': False})

@admin_auth_bp.route('/stats', methods=['GET'])
def get_stats():
    """Î∞©Î¨∏Ïûê ÌÜµÍ≥Ñ"""
    try:
        # Í¥ÄÎ¶¨Ïûê ÌôïÏù∏
        if 'admin_id' not in session:
            return jsonify({'error': 'Unauthorized'}), 401
        
        # Ïò§Îäò Î∞©Î¨∏Ïûê Ïàò
        today = datetime.utcnow().date()
        today_visitors = Visitor.query.filter(
            func.date(Visitor.visit_time) == today
        ).count()
        
        # Ïò§Îäò Í≥†Ïú† IP Ïàò
        today_unique = db.session.query(
            func.count(func.distinct(Visitor.ip_address))
        ).filter(
            func.date(Visitor.visit_time) == today
        ).scalar()
        
        # Ïñ¥Ï†ú Î∞©Î¨∏Ïûê Ïàò
        yesterday = today - timedelta(days=1)
        yesterday_visitors = Visitor.query.filter(
            func.date(Visitor.visit_time) == yesterday
        ).count()
        
        # ÏµúÍ∑º 7Ïùº Î∞©Î¨∏Ïûê Ïàò
        week_ago = today - timedelta(days=7)
        week_visitors = Visitor.query.filter(
            Visitor.visit_time >= week_ago
        ).count()
        
        # Ï†ÑÏ≤¥ Î∞©Î¨∏Ïûê Ïàò
        total_visitors = Visitor.query.count()
        
        # ÏùºÎ≥Ñ ÌÜµÍ≥Ñ (ÏµúÍ∑º 30Ïùº)
        thirty_days_ago = today - timedelta(days=30)
        daily_stats = db.session.query(
            func.date(Visitor.visit_time).label('date'),
            func.count(Visitor.id).label('count'),
            func.count(func.distinct(Visitor.ip_address)).label('unique_count')
        ).filter(
            Visitor.visit_time >= thirty_days_ago
        ).group_by(
            func.date(Visitor.visit_time)
        ).order_by(
            func.date(Visitor.visit_time).desc()
        ).all()
        
        daily_data = [
            {
                'date': str(stat.date),
                'visits': stat.count,
                'unique_visitors': stat.unique_count
            }
            for stat in daily_stats
        ]
        
        # ÏµúÍ∑º Î∞©Î¨∏ Í∏∞Î°ù (ÏµúÍ∑º 50Í∞ú)
        recent_visits = Visitor.query.order_by(
            Visitor.visit_time.desc()
        ).limit(50).all()
        
        recent_data = [
            {
                'ip': visit.ip_address,
                'time': visit.visit_time.strftime('%Y-%m-%d %H:%M:%S'),
                'page': visit.page_path or '/',
                'user_agent': visit.user_agent[:100] if visit.user_agent else 'Unknown'
            }
            for visit in recent_visits
        ]
        
        return jsonify({
            'today': {
                'total': today_visitors,
                'unique': today_unique
            },
            'yesterday': {
                'total': yesterday_visitors
            },
            'week': {
                'total': week_visitors
            },
            'all_time': {
                'total': total_visitors
            },
            'daily_stats': daily_data,
            'recent_visits': recent_data
        })
    
    except Exception as e:
        print(f"Error getting stats: {e}")
        return jsonify({'error': str(e)}), 500

@admin_auth_bp.route('/change-password', methods=['POST'])
def change_password():
    """ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω"""
    try:
        # Í¥ÄÎ¶¨Ïûê ÌôïÏù∏
        if 'admin_id' not in session:
            return jsonify({'error': 'Unauthorized'}), 401
        
        data = request.json
        current_password = data.get('current_password')
        new_password = data.get('new_password')
        
        if not current_password or not new_password:
            return jsonify({'error': 'Both passwords required'}), 400
        
        admin = Admin.query.get(session['admin_id'])
        
        if admin.password_hash != hash_password(current_password):
            return jsonify({'error': 'Current password incorrect'}), 401
        
        admin.password_hash = hash_password(new_password)
        db.session.commit()
        
        return jsonify({'success': True, 'message': 'Password changed successfully'})
    
    except Exception as e:
        return jsonify({'error': str(e)}), 500

